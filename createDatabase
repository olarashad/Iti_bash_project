#!/usr/bin/env bash
# Simple Bash DBMS CLI
# Each database is a directory; each table is a CSV file + a .meta file describing columns




# Globals
DB_PATH=""

# Helpers
function pause() {
  read -rp "\nPress [Enter] to continue..."
}

# ------- Main Menu Functions -------
function create_database() {
  read -rp "Enter database name: " db
  if [[ -z "$db" ]]; then
    echo "Name cannot be empty."
  elif [[ -d "databases/$db" ]]; then
    echo "Database '$db' already exists."
  else
    while true; do
      read -rsp "üîê Enter password for database '$db': " password
      echo
      read -rsp "üîÅ Confirm password: " confirm
      echo
      if [[ "$password" == "$confirm" && -n "$password" ]]; then
        break
      else
        echo "‚ùå Passwords do not match or are empty. Try again."
      fi
    done
   mkdir -p "databases/$db"
    echo -n "$password" > "databases/$db/.dbpass"
    chmod 600 "databases/$db/.dbpass"

    echo "‚úÖ Database '$db' created and secured with a password."
  fi
  pause
}
  
function list_databases() {
    ./listDatabase.sh
}


function drop_database() {
  ./dropDatabase 
}


function connect_database() {
  read -rp "Enter database name to connect: " db
  ./connect_db.sh "$db"
}

# function connect_database() {
#   read -rp "Enter database name to connect: " db
#   if [[ -d "$db" ]]; then
#     currentDb="$db"
#     export currentDb
#     echo "Connected to database '$db'."
    
#     # Call the script responsible for opening the table menu
#     ./connect_db.sh "$db"
#   else
#     echo "‚ùå Database '$db' does not exist."
#     pause
#   fi
# }

# ------- Menu Loops -------
function main_menu() {
  while true; do
    clear
    echo "=== Bash DBMS ==="
    echo "1) Create Database"
    echo "2) List Databases"
    echo "3) Connect to Database"
    echo "4) Drop Database"
    echo "5) Exit"
    read -rp "Select an option [1-5]: " opt
    case $opt in
      1) create_database;;
      2) list_databases;;
      3) connect_database;;
      4) drop_database;;
      5) echo "Goodbye!"; exit 0;;
      *) echo "Invalid option."; pause;;
    esac
  done
}

# Entry point
enable_paging() {
  shopt -s extglob
}



enable_paging
main_menu
